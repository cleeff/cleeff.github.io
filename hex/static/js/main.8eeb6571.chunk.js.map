{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["max_rating","sess","InferenceSession","url","sess_init","info","agent_is_blue","load_model","a","loadModel","PosToId","x","y","IdToPos","id","FullNeighbors","_","range","board_size","neighbors","push","Neighbors","HasWinner","board","starts","targets","p","target","toVisit","visited","Set","length","node","pop","neighbor","toString","has","add","Toggle","props","state","showRatings","initial","handleClick","bind","this","toggle","setState","onClick","React","Component","HexGame","setup","cells","Array","fill","connected_sets","connected_set_rows","winner","model_output","model_display","moves","clickCell","G","ctx","reduce","cur_player","currentPlayer","has_won","last_move","endIf","turn","moveLimit","ai","enumerate","i","move","args","minimax","depth","current_player","first_player","other_player","value","best","HexBoard","setDisplayRatings","display_ratings","player","isActive","agent","ai_board","from","sure_win_move","findSureWinMove","runModel","then","result","num_moves","Math","pow","toFixed","test_board","sure_win","console","log","input_array","input","Tensor","Float32Array","run","output","values","next","data","input_values","input_values2","evalModel","outputTensor","outputTensor2","average_output","final_output","error","gameover","p1Style","stroke","strokeWidth","p2Style","emptyStyle","hexagons","q","r","key","cellStyle","s","cellText","b","class","href","className","width","height","viewBox","size","flat","spacing","App","Client","game","debug","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8eeb6571.chunk.js","sourcesContent":["// TODO\n// * monte carlo move selection\n\nimport {Client} from \"boardgame.io/react\";\nimport {Hexagon, HexGrid, Layout, Text} from \"react-hexgrid\";\nimport React from \"react\";\nimport {InferenceSession, Tensor} from \"onnxjs\";\nimport _ from \"lodash\";\n\nimport \"./App.css\";\n\nconst board_size = 11;\nconst sess = new InferenceSession();\nconst url = \"./11_2w4_1262.onnx\";\n\nlet sess_init = false;\nlet info = \"\";\nlet agent_is_blue = true;\nlet max_rating;\n\n\nasync function load_model() {\n  await sess.loadModel(url);\n  sess_init = true;\n}\n\nfunction PosToId(x, y) {\n  return x + board_size * y;\n}\n\nfunction IdToPos(id) {\n  const x = id % board_size;\n  const y = (id - x) / board_size;\n  return [x, y];\n}\n\nfunction Neighbors(id) {\n  const [x, y] = IdToPos(id);\n\n  let neighbors = [];\n  if (x !== 0) {\n    neighbors.push(PosToId(x - 1, y));\n  }\n  if (x !== 0 && y !== board_size - 1) {\n    neighbors.push(PosToId(x - 1, y + 1));\n  }\n  if (y !== 0) {\n    neighbors.push(PosToId(x, y - 1));\n  }\n  if (y !== board_size - 1) {\n    neighbors.push(PosToId(x, y + 1));\n  }\n  if (x !== board_size - 1 && y !== 0) {\n    neighbors.push(PosToId(x + 1, y - 1));\n  }\n  if (x !== board_size - 1) {\n    neighbors.push(PosToId(x + 1, y));\n  }\n\n  return neighbors;\n}\n\nfunction FullNeighbors(id) {\n  if (id === 'red-bottom') {\n    return _.range(board_size * (board_size - 1), board_size * board_size);\n  }\n  if (id === 'red-top') {\n    return _.range(0, board_size);\n  }\n  if (id === 'blue-left') {\n    return _.range(0, board_size * board_size, board_size);\n  }\n  if (id === 'blue-right') {\n    return _.range(board_size - 1, board_size * board_size, board_size);\n  }\n  let neighbors = Neighbors(id);\n  const [x, y] = IdToPos(id);\n  if (x === 0) {\n    neighbors.push('blue-left');\n  }\n  if (x === board_size - 1) {\n    neighbors.push('blue-right');\n  }\n  if (y === 0) {\n    neighbors.push('red-top');\n  }\n  if (y === board_size - 1) {\n    neighbors.push('red-bottom');\n  }\n  return neighbors;\n}\n\n/**\n * @return {boolean}\n */\nfunction HasWinner(board) {\n  const starts = ['red-top', 'blue-left'];\n  const targets = ['red-bottom', 'blue-right'];\n  for (let p in _.range(2)) {\n    const target = targets[p];\n    let toVisit = [starts[p]];\n    let visited = new Set();\n    while (toVisit.length > 0) {\n      const node = toVisit.pop();\n      for (const neighbor of FullNeighbors(node)) {\n        if (neighbor === target) {\n          return true;\n        }\n        if (typeof neighbor === 'string') {\n          continue;\n        }\n        if (board[neighbor] === p.toString() && !visited.has(neighbor)) {\n          toVisit.push(neighbor);\n          visited.add(neighbor);\n        }\n      }\n    }\n  }\n  return false;\n}\n\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {showRatings: props.initial};\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.props.toggle(!this.state.showRatings);\n    this.setState((state) => ({\n      showRatings: !state.showRatings,\n    }));\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        {this.state.showRatings ? \"Hide Ratings\" : \"Show Ratings\"}\n      </button>\n    );\n  }\n}\n\nconst HexGame = {\n  setup: () => ({\n    cells: Array(board_size * board_size).fill(null),\n    connected_sets: [[], []],\n    connected_set_rows: [[], []],\n    winner: null,\n    model_output: Array(board_size * board_size).fill(null),\n    model_display: Array(board_size * board_size).fill(\"\"),\n    // index 0 will always be red independent of swap\n    // save a pair of sets for each player:\n    //   * the first set is a connected component of stones\n    //   * the second set is the indices of these stones in the direction\n    //     of the player thus the winning condition is having\n    //     0 and (size-1) in one of the second sets.\n  }),\n\n  moves: {\n    clickCell: (G, ctx, id) => {\n      const num_moves = G.cells.reduce((x, y) => x + (y ? 1 : 0), 0);\n      if (num_moves == 1 && G.cells[id] == \"0\") {\n        // switch!\n        agent_is_blue = !agent_is_blue;\n        info = \"Switched!\";\n      } else {\n        let cur_player = ctx.currentPlayer;\n        if (!agent_is_blue) {\n          cur_player = ctx.currentPlayer === \"0\" ? \"1\" : \"0\";\n        }\n        G.cells[id] = cur_player;\n        const has_won = HasWinner(G.cells);\n        G.last_move = id;\n        if (has_won) {\n          G.winner = cur_player;\n        }\n      }\n    },\n  },\n\n  endIf: (G, ctx) => {\n    if (G.winner !== null) {\n      return {winner: G.winner};\n    }\n  },\n\n  turn: {\n    moveLimit: 1,\n  },\n\n  ai: {\n    enumerate: (G, ctx) => {\n      let moves = [];\n      for (let i = 0; i < board_size * board_size; i++) {\n        if (G.cells[i] === null) {\n          moves.push({move: \"clickCell\", args: [i]});\n        }\n      }\n      return moves;\n    },\n  },\n};\n\n// rating: +1 = red (\"0\") wins\n//         -1 = blue (\"1\") wins\n// might return 0 although the opponent could force a win.\nfunction minimax(board, depth, current_player, first_player) {\n  const other_player = current_player === \"0\" ? \"1\" : \"0\";\n  if (HasWinner(board)) {\n    // other player won.\n    if (current_player === \"0\") {\n      return [-1, null]; // blue won\n    } else {\n      return [1, null]; // red won\n    }\n  }\n\n  if (depth === 0) {\n    return [0, null]; // no one won\n  }\n  if (current_player === \"0\") { // red, maximizing\n    let value = -10;\n    let best = null;\n    for (let i = 0; i < board_size * board_size; i++) {\n      if (board[i] !== null) {\n        continue;\n      }\n      board[i] = current_player;\n      const a = minimax(board, depth - 1, other_player, first_player);\n      board[i] = null;\n      if (a[0] > value) {\n        value = a[0];\n        best = i;\n      }\n      if (value >= 1) {\n        // this is good enough\n        return [value, best];\n      }\n      if (current_player !== first_player && value === 0) {\n          // this is good enough for the second player.\n          return [value, best];\n      }\n    }\n    return [value, best];\n  } else { // blue, minimizing\n    let value = 10;\n    let best = null;\n    for (let i = 0; i < board_size * board_size; i++) {\n      if (board[i] !== null) {\n        continue;\n      }\n      board[i] = current_player;\n      const a = minimax(board, depth - 1, other_player, first_player);\n      board[i] = null;\n      if (a[0] < value) {\n        value = a[0];\n        best = i;\n        if (value <= -1) {\n          // this is bad enough\n          return [value, best];\n        }\n        if (current_player !== first_player && value === 0) {\n          // this is good enough for the second player.\n          return [value, best];\n        }\n      }\n    }\n    return [value, best];\n  }\n}\n\nclass HexBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setDisplayRatings = this.setDisplayRatings.bind(this);\n    this.state = {display_ratings: false};\n  }\n\n  findSureWinMove(board, player) {\n    for (let depth of [1, 3]) {\n      const a = minimax(board, depth, player, player);\n      if (player === '0') {\n        if (a[0] > 0) {\n          return a[1];\n        }\n      } else {\n        if (a[0] < 0) {\n          return a[1];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  onClick(id) {\n    if (!this.isActive(id)) {\n      return;\n    }\n    // build board for ai independently from\n    // game mechanics to avoid race conditions.\n    const player = agent_is_blue ? \"0\" : \"1\";\n    const agent = agent_is_blue ? \"1\" : \"0\";\n    let ai_board = Array.from(this.props.G.cells);\n    ai_board[id] = player;\n\n    // actually make the move\n    this.props.moves.clickCell(id);\n\n    if (HasWinner(ai_board)) {\n      // player has already won.\n      return;\n    }\n\n    const sure_win_move = this.findSureWinMove(ai_board, agent);\n    if (sure_win_move !== null) {\n      console.log(\"Found sure win move\", sure_win_move);\n      this.props.moves.clickCell(sure_win_move);\n      for (let i = 0; i < board_size * board_size; i++) {\n        this.props.G.model_display[i] = \"\";\n      }\n      return;\n    }\n\n    this.runModel(ai_board).then((result) => {\n      // AI move selection\n      const num_moves = this.props.G.cells.reduce((x, y) => x + (y ? 1 : 0), 0);\n      let best = -1;\n      for (let i = 0; i < board_size * board_size; i++) {\n        if (num_moves <= 1 || this.props.G.cells[i] === null) {\n          if (best === -1 || result[i] > max_rating) {\n            best = i;\n            max_rating = result[i];\n          }\n        }\n      }\n      let score_sum = 0;\n      for (let i = 0; i < board_size * board_size; i++) {\n        if (num_moves <= 1 || this.props.G.cells[i] === null) {\n          const score = Math.pow(2, result[i] - max_rating);\n          score_sum += score;\n        }\n      }\n\n      for (let i = 0; i < board_size * board_size; i++) {\n        if (num_moves <= 1 || this.props.G.cells[i] === null) {\n          const score = Math.pow(2, result[i] - max_rating);\n          //this.props.G.model_display[i] = (100 * score / score_sum).toFixed(0);\n          this.props.G.model_display[i] = result[i].toFixed(1);\n        } else {\n          this.props.G.model_display[i] = \"\";\n        }\n      }\n\n      let test_board = Array.from(this.props.G.cells);\n      test_board[id] = player;\n      test_board[best] = agent;\n      const sure_win = this.findSureWinMove(test_board, player);\n      if (sure_win !== null) {\n        console.log(\"Player can surely win with the suggested move\", best, \"Moving to the sure win move instead.\");\n        best = sure_win;\n      }\n\n      this.props.moves.clickCell(best);\n    });\n  }\n\n  setDisplayRatings(display_ratings) {\n    this.setState({display_ratings: display_ratings});\n  }\n\n  async evalModel(input_array)\n  {\n      const input = [\n        new Tensor(new Float32Array(input_array), \"float32\", [1, 2, 11, 11]),\n      ];\n      const output = await sess.run(input);\n      return output.values().next().value.data;\n  }\n\n  async runModel(cells) {\n    try {\n      info = \"waiting for agent to move...\";\n      if (!sess_init) {\n        await load_model();\n      }\n\n      let input_values = [];\n      if (agent_is_blue) {\n        for (let x = 0; x < board_size; x++) {\n          for (let y = 0; y < board_size; y++) {\n            const id = PosToId(x, y);\n            input_values.push(cells[id] === \"1\" ? 1 : 0);\n          }\n        }\n        for (let x = 0; x < board_size; x++) {\n          for (let y = 0; y < board_size; y++) {\n            const id = PosToId(x, y);\n            input_values.push(cells[id] === \"0\" ? 1 : 0);\n          }\n        }\n      } else {\n        for (let y = 0; y < board_size; y++) {\n          for (let x = 0; x < board_size; x++) {\n            const id = PosToId(x, y);\n            input_values.push(cells[id] === \"0\" ? 1 : 0);\n          }\n        }\n        for (let y = 0; y < board_size; y++) {\n          for (let x = 0; x < board_size; x++) {\n            const id = PosToId(x, y);\n            input_values.push(cells[id] === \"1\" ? 1 : 0);\n          }\n        }\n      }\n      let input_values2 = [];\n      for (let id = 0; id < board_size * board_size; id++) {\n        input_values2.push(input_values[board_size * board_size - id - 1]);\n      }\n      for (let id = 0; id < board_size * board_size; id++) {\n        input_values2.push(input_values[2 * board_size * board_size - id - 1]);\n      }\n\n      const outputTensor = await this.evalModel(input_values);\n      const outputTensor2 = await this.evalModel(input_values2);\n      let average_output = [];\n      for (let id = 0; id < board_size * board_size; id++) {\n        average_output.push((outputTensor[id] + outputTensor2[board_size * board_size - id - 1])/2);\n      }\n\n      let final_output = [];\n      if (agent_is_blue) {\n        // need to transpose\n        for (let x = 0; x < board_size; x++) {\n          for (let y = 0; y < board_size; y++) {\n            const id = PosToId(x, y);\n            final_output.push(average_output[id]);\n          }\n        }\n      } else {\n        final_output = average_output;\n      }\n\n      for (let i = 0; i < board_size * board_size; i++) {\n        this.props.G.model_output[i] = final_output[i];\n      }\n\n      info = \"\";\n      return final_output;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  cellStyle(id) {\n    if (this.props.G.cells[id] === null) {\n      return \"emptyStyle\";\n    }\n    if (this.props.G.cells[id] === \"0\") {\n      return \"p1Style\";\n    }\n    return \"p2Style\";\n  }\n\n  cellText(id, display_ratings) {\n    if (display_ratings) {\n      return this.props.G.model_display[id];\n    }\n    return \"\";\n  }\n\n  isActive(id) {\n    if (!this.props.isActive) return false;\n    if (this.props.G.cells[id] !== null) return false;\n    return true;\n  }\n\n  render() {\n    if (this.props.ctx.gameover) {\n      let player = agent_is_blue ? \"0\" : \"1\";\n      info =\n        this.props.ctx.gameover.winner === player\n          ? \"Player has won!\"\n          : \"Agent has won!\";\n    }\n\n    const p1Style = {\n      fill: \"rgb(251, 41, 67)\",\n      stroke: \"black\",\n      strokeWidth: 0.1,\n    };\n    const p2Style = {\n      fill: \"rgb(6, 154, 243)\",\n      stroke: \"black\",\n      strokeWidth: 0.1,\n    };\n    const emptyStyle = {\n      fill: \"white\",\n      stroke: \"black\",\n      strokeWidth: 0.1,\n    };\n\n    let hexagons = [];\n    // field hexagons, initially empty\n    for (let q = 0; q < board_size; q++) {\n      for (let r = 0; r < board_size; r++) {\n        const id = q + r * board_size;\n        hexagons.push(\n          <Hexagon\n            id={id}\n            key={id}\n            onClick={() => this.onClick(id)}\n            cellStyle={\n              this.cellStyle(id) === \"p2Style\"\n                ? p2Style\n                : this.cellStyle(id) === \"p1Style\"\n                ? p1Style\n                : emptyStyle\n            }\n            q={q}\n            r={r}\n            s={-q - r}\n          >\n            <Text>{this.cellText(id, this.state.display_ratings)}</Text>\n          </Hexagon>\n        );\n      }\n    }\n\n    // border hexagons\n    let id = board_size * board_size;\n    for (let a = 0; a < board_size; a++) {\n      let b = -1;\n      hexagons.push(\n        <Hexagon key={id++} cellStyle={p1Style} q={a} r={b} s={-a - b}/>\n      );\n      hexagons.push(\n        <Hexagon key={id++} cellStyle={p2Style} q={b} r={a} s={-a - b}/>\n      );\n      b = board_size;\n      hexagons.push(\n        <Hexagon key={id++} cellStyle={p1Style} q={a} r={b} s={-a - b}/>\n      );\n      hexagons.push(\n        <Hexagon key={id++} cellStyle={p2Style} q={b} r={a} s={-a - b}/>\n      );\n    }\n\n    return (\n      <div>\n        <div class=\"intro\">\n          HexHex - A reinforcement deep learning agent by Simon Buchholz, David\n          Harbecke, and Pascal Van Cleeff.\n          <br/>\n          <a href=\"https://github.com/harbecke/hex\">github.com/harbecke/hex</a>\n        </div>\n        <div id=\"winner\">{info}</div>\n        <div id=\"controls\">\n          <Toggle initial={false} toggle={this.setDisplayRatings}/>\n        </div>\n        <div className=\"App\">\n          <HexGrid width={1000} height={800} viewBox=\"0 -3 30 30\">\n            <Layout size={{x: 1, y: 1}} flat={false} spacing={1}>\n              {hexagons}\n            </Layout>\n          </HexGrid>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst App = Client({game: HexGame, board: HexBoard, debug: false});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}