{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["max_rating","sess","InferenceSession","url","sess_init","info","agent_is_blue","load_model","a","loadModel","PosToId","x","y","IdToPos","id","AddStone","connected_sets","connected_set_rows","player_color","new_cc","Set","new_cc_rows","neighbors","push","board_size","Neighbors","idx","length","cc","cc_rows","filter","has","size","Array","from","prototype","last","this","Toggle","props","state","showRatings","initial","handleClick","bind","toggle","setState","onClick","React","Component","HexGame","setup","cells","fill","winner","model_output","model_display","moves","clickCell","G","ctx","reduce","cur_player","currentPlayer","has_won","last_move","endIf","turn","moveLimit","ai","enumerate","i","move","args","HexBoard","setDisplayRatings","display_ratings","board","minimax","sets","rows","depth","maximizing_player","player","agent","value","best","child_board","child_sets","JSON","parse","stringify","child_rows","isActive","current_player","ai_board","sure_win_move","findSureWinMove","runModel","then","result","num_moves","score_sum","Math","pow","score","toFixed","console","log","input_values","input_values2","input","Tensor","Float32Array","input2","run","output","output2","outputTensor","values","next","outputTensor2","output_transposed","data","error","gameover","p1Style","stroke","strokeWidth","p2Style","emptyStyle","hexagons","q","r","key","cellStyle","s","cellText","b","class","href","className","width","height","viewBox","flat","spacing","App","Client","game","debug","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a528e3f5.chunk.js","sourcesContent":["// TODO\n// * monte carlo move selection\n\nimport { Client } from \"boardgame.io/react\";\nimport { HexGrid, Layout, Hexagon, Text } from \"react-hexgrid\";\nimport React from \"react\";\nimport { Tensor, InferenceSession } from \"onnxjs\";\n\nimport \"./App.css\";\n\nconst board_size = 11;\nconst sess = new InferenceSession();\nconst url = \"./11_2w4_1100.onnx\";\n\nlet sess_init = false;\nlet info = \"\";\nlet agent_is_blue = true;\nlet max_rating;\n\nif (!Array.prototype.last){\n    Array.prototype.last = function(){\n        return this[this.length - 1];\n    };\n};\n\nasync function load_model() {\n  await sess.loadModel(url);\n  sess_init = true;\n}\n\nfunction PosToId(x, y) {\n  return x + board_size * y;\n}\nfunction IdToPos(id) {\n  const x = id % board_size;\n  const y = (id - x) / board_size;\n  return [x, y];\n}\n\nfunction Neighbors(id) {\n  const [x, y] = IdToPos(id);\n\n  let neighbors = [];\n  if (x !== 0) {\n    neighbors.push(PosToId(x - 1, y));\n  }\n  if (x !== 0 && y !== board_size - 1) {\n    neighbors.push(PosToId(x - 1, y + 1));\n  }\n  if (y !== 0) {\n    neighbors.push(PosToId(x, y - 1));\n  }\n  if (y !== board_size - 1) {\n    neighbors.push(PosToId(x, y + 1));\n  }\n  if (x !== board_size - 1 && y !== 0) {\n    neighbors.push(PosToId(x + 1, y - 1));\n  }\n  if (x !== board_size - 1) {\n    neighbors.push(PosToId(x + 1, y));\n  }\n\n  return neighbors;\n}\n\nfunction AddStone(connected_sets, connected_set_rows, id, player_color) {\n  const [x, y] = IdToPos(id);\n  let new_cc = new Set([id]);\n  let new_cc_rows = player_color === \"0\" ? new Set([y]) : new Set([x]);\n\n  const neighbors = new Set(Neighbors(id));\n  for (let idx = 0; idx < connected_sets[player_color].length; idx++) {\n    let cc = new Set(connected_sets[player_color][idx]);\n    let cc_rows = new Set(connected_set_rows[player_color][idx]);\n    const intersection = new Set([...cc].filter((x) => neighbors.has(x)));\n    if (intersection.size > 0) {\n      new_cc = new Set([...new_cc, ...cc]);\n      new_cc_rows = new Set([...new_cc_rows, ...cc_rows]);\n    }\n  }\n\n  connected_sets[player_color].push(Array.from(new_cc));\n  connected_set_rows[player_color].push(Array.from(new_cc_rows));\n  return new_cc_rows.has(0) && new_cc_rows.has(board_size - 1);\n}\n\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showRatings: props.initial };\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.props.toggle(!this.state.showRatings);\n    this.setState((state) => ({\n      showRatings: !state.showRatings,\n    }));\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        {this.state.showRatings ? \"Hide Ratings\" : \"Show Ratings\"}\n      </button>\n    );\n  }\n}\n\nconst HexGame = {\n  setup: () => ({\n    cells: Array(board_size * board_size).fill(null),\n    connected_sets: [[], []],\n    connected_set_rows: [[], []],\n    winner: null,\n    model_output: Array(board_size * board_size).fill(null),\n    model_display: Array(board_size * board_size).fill(null),\n    // index 0 will always be red independent of swap\n    // save a pair of sets for each player:\n    //   * the first set is a connected component of stones\n    //   * the second set is the indices of these stones in the direction\n    //     of the player thus the winning condition is having\n    //     0 and (size-1) in one of the second sets.\n  }),\n\n  moves: {\n    clickCell: (G, ctx, id) => {\n      const num_moves = G.cells.reduce((x, y) => x + (y ? 1 : 0), 0);\n      if (num_moves == 1 && G.cells[id] == \"0\") {\n        // switch!\n        agent_is_blue = !agent_is_blue;\n        info = \"Switched!\";\n      } else {\n        let cur_player = ctx.currentPlayer;\n        if (!agent_is_blue) {\n          cur_player = ctx.currentPlayer === \"0\" ? \"1\" : \"0\";\n        }\n        G.cells[id] = cur_player;\n        const has_won = AddStone(G.connected_sets, G.connected_set_rows, id, cur_player);\n        G.last_move = id;\n        if (has_won) {\n          G.winner = cur_player;\n        }\n      }\n    },\n  },\n\n  endIf: (G, ctx) => {\n    if (G.winner !== null) {\n      return { winner: G.winner };\n    }\n  },\n\n  turn: {\n    moveLimit: 1,\n  },\n\n  ai: {\n    enumerate: (G, ctx) => {\n      let moves = [];\n      for (let i = 0; i < board_size * board_size; i++) {\n        if (G.cells[i] === null) {\n          moves.push({ move: \"clickCell\", args: [i] });\n        }\n      }\n      return moves;\n    },\n  },\n};\n\nfunction minimax(board, sets, rows, depth, maximizing_player) {\n    const player = agent_is_blue ? \"0\" : \"1\";\n    const agent = agent_is_blue ? \"1\" : \"0\";\n\n    if (depth === 0) {\n      return [0, null];\n    }\n    if (maximizing_player) {\n      let value = -10\n      let best = null;\n      for (let i = 0; i < board_size * board_size; i++) {\n        if (board[i] !== null) { continue; }\n        let child_board = Array.from(board);\n        let child_sets = JSON.parse(JSON.stringify(sets));\n        let child_rows = JSON.parse(JSON.stringify(rows));\n        child_board[i] = 'a';\n        if (AddStone(child_sets, child_rows, i, agent)) {\n          // agent wins :-)\n          // earlier = better\n          return [1, i];\n        }\n        const a = minimax(board, child_sets, child_rows, depth - 1, false);\n        if (a[0] > value) {\n          value = a[0];\n          best = i;\n        }\n        if (value >= 1) {\n          // this is good enough\n          return [value, best];\n        }\n      }\n      return [value, best];\n    }\n    else {\n      let value = 10;\n      let best = null;\n      for (let i = 0; i < board_size * board_size; i++) {\n        if (board[i] !== null) { continue; }\n        let child_board = Array.from(board);\n        let child_sets = JSON.parse(JSON.stringify(sets));\n        let child_rows = JSON.parse(JSON.stringify(rows));\n        child_board[i] = 'p';\n        if (AddStone(child_sets, child_rows, i, player)) {\n          // player wins.\n          return [-1, i];\n        }\n        const a = minimax(child_board, child_sets, child_rows, depth - 1, true);\n        if (a[0] < value) {\n          value = a[0];\n          best = i;\n          if (value <= 0) {\n            // this is bad enough\n            return [value, best];\n          }\n        }\n      }\n      return [value, best];\n    }\n  }\n\nclass HexBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setDisplayRatings = this.setDisplayRatings.bind(this);\n    this.state = { display_ratings: false };\n  }\n\n  findSureWinMove(board, connected_sets, connected_set_rows) {\n    const depth = 3;\n    const ai_first = true;\n    const a = minimax(board, connected_sets, connected_set_rows, depth, ai_first);\n    if (a[0] > 0) {\n      return a[1];\n    } \n    return null;\n  }\n\n  onClick(id) {\n    if (!this.isActive(id)) {\n      return;\n    }\n    // build board for ai independently from\n    // game mechanics to avoid race conditions.\n    const current_player = agent_is_blue ? \"0\" : \"1\";\n    const agent = agent_is_blue ? \"1\" : \"0\";\n    let ai_board = Array.from(this.props.G.cells);\n    ai_board[id] = current_player;\n\n    // actually make the move\n    this.props.moves.clickCell(id);\n\n    let connected_sets = JSON.parse(JSON.stringify(this.props.G.connected_sets));\n    let connected_set_rows = JSON.parse(JSON.stringify(this.props.G.connected_set_rows));\n    if (AddStone(connected_sets, connected_set_rows, id, current_player)) {\n      // player has already won.\n      return; \n    }\n\n    const sure_win_move = this.findSureWinMove(ai_board, connected_sets, connected_set_rows);\n    if (sure_win_move !== null) {\n      console.log(\"Found sure win move\", sure_win_move);\n      this.props.moves.clickCell(sure_win_move);\n      for (let i = 0; i < board_size * board_size; i++) {\n        this.props.G.model_display[i] = \"\";\n      }\n      return;\n    }\n\n    this.runModel(ai_board).then((result) => {\n      // AI move selection\n      const num_moves = this.props.G.cells.reduce((x, y) => x + (y ? 1 : 0), 0);\n      let best = -1;\n      for (let i = 0; i < board_size * board_size; i++) {\n        if (num_moves <= 1 || this.props.G.cells[i] === null) {\n          if (best === -1 || result[i] > max_rating) {\n            best = i;\n            max_rating = result[i];\n          }\n        }\n      }\n      let score_sum = 0;\n      for (let i = 0; i < board_size * board_size; i++) {\n        if (num_moves <= 1 || this.props.G.cells[i] === null) {\n          const score = Math.pow(2, result[i] - max_rating);\n          score_sum += score;\n        }\n      }\n\n      for (let i = 0; i < board_size * board_size; i++) {\n        if (num_moves <= 1 || this.props.G.cells[i] === null) {\n          const score = Math.pow(2, result[i] - max_rating);\n          this.props.G.model_display[i] = (100 * score / score_sum).toFixed(0);\n        } else {\n          this.props.G.model_display[i] = \"\";\n        }\n      }\n\n      this.props.moves.clickCell(best);\n    });\n  }\n\n  setDisplayRatings(display_ratings) {\n    this.setState({ display_ratings: display_ratings });\n  }\n\n  async runModel(cells) {\n    try {\n      info = \"waiting for agent to move...\";\n      if (!sess_init) {\n        await load_model();\n      }\n\n      let input_values = [];\n      if (agent_is_blue) {\n        for (let x = 0; x < board_size; x++) {\n          for (let y = 0; y < board_size; y++) {\n            const id = PosToId(x, y);\n            input_values.push(cells[id] === \"1\" ? 1 : 0);\n          }\n        }\n        for (let x = 0; x < board_size; x++) {\n          for (let y = 0; y < board_size; y++) {\n            const id = PosToId(x, y);\n            input_values.push(cells[id] === \"0\" ? 1 : 0);\n          }\n        }\n      } else {\n        for (let y = 0; y < board_size; y++) {\n          for (let x = 0; x < board_size; x++) {\n            const id = PosToId(x, y);\n            input_values.push(cells[id] === \"0\" ? 1 : 0);\n          }\n        }\n        for (let y = 0; y < board_size; y++) {\n          for (let x = 0; x < board_size; x++) {\n            const id = PosToId(x, y);\n            input_values.push(cells[id] === \"1\" ? 1 : 0);\n          }\n        }\n      }\n      let input_values2 = [];\n      for (let id = 0; id < board_size * board_size; id++) {\n        input_values2.push(input_values[board_size*board_size - id - 1]);\n      }\n      for (let id = 0; id < board_size * board_size; id++) {\n        input_values2.push(input_values[2*board_size*board_size - id - 1]);\n      }\n      const input = [\n        new Tensor(new Float32Array(input_values), \"float32\", [1, 2, 11, 11]),\n      ];\n      const input2 = [\n        new Tensor(new Float32Array(input_values2), \"float32\", [1, 2, 11, 11]),\n      ];\n      const output = await sess.run(input);\n      const output2 = await sess.run(input2);\n      const outputTensor = output.values().next().value;\n      const outputTensor2 = output2.values().next().value;\n      let output_transposed = [];\n      if (agent_is_blue) {\n        for (let x = 0; x < board_size; x++) {\n          for (let y = 0; y < board_size; y++) {\n            const id = PosToId(x, y);\n            output_transposed.push(\n              (outputTensor.data[id] +\n               outputTensor2.data[board_size * board_size - id - 1]\n              ) / 2);\n          }\n        }\n      } else {\n        output_transposed = outputTensor.data;\n      }\n\n      for (let i = 0; i < board_size * board_size; i++) {\n        this.props.G.model_output[i] = output_transposed[i];\n      }\n\n      info = \"\";\n      return output_transposed;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  cellStyle(id) {\n    if (this.props.G.cells[id] === null) {\n      return \"emptyStyle\";\n    }\n    if (this.props.G.cells[id] === \"0\") {\n      return \"p1Style\";\n    }\n    return \"p2Style\";\n  }\n\n  cellText(id, display_ratings) {\n    return this.props.G.model_display[id];\n  }\n\n  isActive(id) {\n    if (!this.props.isActive) return false;\n    if (this.props.G.cells[id] !== null) return false;\n    return true;\n  }\n\n  render() {\n    if (this.props.ctx.gameover) {\n      let player = agent_is_blue ? \"0\" : \"1\";\n      info =\n        this.props.ctx.gameover.winner === player\n          ? \"Player has won!\"\n          : \"Agent has won!\";\n    }\n\n    const p1Style = {\n      fill: \"rgb(251, 41, 67)\",\n      stroke: \"black\",\n      strokeWidth: 0.1,\n    };\n    const p2Style = {\n      fill: \"rgb(6, 154, 243)\",\n      stroke: \"black\",\n      strokeWidth: 0.1,\n    };\n    const emptyStyle = {\n      fill: \"white\",\n      stroke: \"black\",\n      strokeWidth: 0.1,\n    };\n\n    let hexagons = [];\n    // field hexagons, initially empty\n    for (let q = 0; q < board_size; q++) {\n      for (let r = 0; r < board_size; r++) {\n        const id = q + r * board_size;\n        hexagons.push(\n          <Hexagon\n            id={id}\n            key={id}\n            onClick={() => this.onClick(id)}\n            cellStyle={\n              this.cellStyle(id) === \"p2Style\"\n                ? p2Style\n                : this.cellStyle(id) === \"p1Style\"\n                ? p1Style\n                : emptyStyle\n            }\n            q={q}\n            r={r}\n            s={-q - r}\n          >\n            <Text>{this.cellText(id, this.state.display_ratings)}</Text>\n          </Hexagon>\n        );\n      }\n    }\n\n    // border hexagons\n    let id = board_size * board_size;\n    for (let a = 0; a < board_size; a++) {\n      let b = -1;\n      hexagons.push(\n        <Hexagon key={id++} cellStyle={p1Style} q={a} r={b} s={-a - b} />\n      );\n      hexagons.push(\n        <Hexagon key={id++} cellStyle={p2Style} q={b} r={a} s={-a - b} />\n      );\n      b = board_size;\n      hexagons.push(\n        <Hexagon key={id++} cellStyle={p1Style} q={a} r={b} s={-a - b} />\n      );\n      hexagons.push(\n        <Hexagon key={id++} cellStyle={p2Style} q={b} r={a} s={-a - b} />\n      );\n    }\n\n    return (\n      <div>\n        <div class=\"intro\">\n          HexHex - A reinforcement deep learning agent by Simon Buchholz, David\n          Harbecke, and Pascal Van Cleeff.\n          <br />\n          <a href=\"https://github.com/harbecke/hex\">github.com/harbecke/hex</a>\n        </div>\n        <div id=\"winner\">{info}</div>\n        <div id=\"controls\">\n          <Toggle initial={false} toggle={this.setDisplayRatings} />\n        </div>\n        <div className=\"App\">\n          <HexGrid width={1000} height={800} viewBox=\"0 -3 30 30\">\n            <Layout size={{ x: 1, y: 1 }} flat={false} spacing={1}>\n              {hexagons}\n            </Layout>\n          </HexGrid>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst App = Client({ game: HexGame, board: HexBoard, debug: false });\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}